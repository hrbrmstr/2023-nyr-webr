{
  "hash": "76ac59092c4b350b3c4bce2a51fe8c8e",
  "result": {
    "markdown": "---\nengine: knitr\nformat:\n  revealjs:\n    incremental: true\n    logo: logo.png\n    footer: 2023 New York R Conference • @hrbrmstr (boB Rudis)\n    theme: [dark, custom.scss]\n---\n\n\n# (2 things) Before we begin…\n\n<center>\n![](img/ukr-shield.png)\n</center>\n\n# Into the WebR-Verse {background-image=\"img/mask.jpg\" background-opacity=\"20%\"}\n\nBringing the power of R to your browser and beyond.\n\n## {background-image=\"img/hippie.jpeg\" background-opacity=\"25%\"}\n\n- Foundations <span class=\"parenthetical\">(i.e., WASM 101)</span>\n- Origin Story <span class=\"parenthetical\">(i.e., The challeges of getting R compiled to WASM)</span>\n- With Great Power… <span class=\"parenthetical\">(i.e., Just what _can_ you do with WebR)</span>\n- Web-Slinging 101 <span class=\"parenthetical\">(i.e., Learning modern web dev skills)</span>\n- Dive Into The WebR-Verse <span class=\"parenthetical\">(i.e., Ideas & where you can go to learn more)</span>\n\n## Foundations {background-image=\"img/panels.png\" background-opacity=\"20%\"}\n\n![](img/webassembly.svg)\n\n## WebAssembly (2015) {background-image=\"img/panels.png\" background-opacity=\"20%\"}\n\nBinary instruction format targeting a stack-based virtual machine that runs <span class=\"h\">in-browser</span> or <span class=\"h\">on-system</span>.\n\n. . .\n\n```\n\n  (module\n    (memory (export \"memory\") 1)\n    (data (i32.const 0) \"Hello, world!\")\n    (global (export \"length\") i32 (i32.const 12))\n    (global (export \"position\") i32 (i32.const 0)))  \n  \n```\n\n. . .\n\n<p class=\"parenthetical\">☝️ is the text representation (WAT)</p>\n\n## WebAssembly {background-image=\"img/panels.png\" background-opacity=\"20%\"}\n\nYou don't need to write WAT code to create WASM targets.\n\n- <span class=\"h\">C and C++</span>: Emscripten is an LLVM-to-JavaScript/WebAssembly compiler that is used to compile C and C++ code into WebAssembly\n- <span class=\"h\">Rust</span>: Rust also uses LLVM as its compiler backend, enabling it to compile Rust code into WebAssembly\n- <span class=\"h\">Go</span> has experimental support for WebAssembly as a compilation target\n  \n. . . \n\n↗️ [Lots more do as well.](https://www.fermyon.com/wasm-languages/webassembly-language-support)\n\n## {background-image=\"img/why.png\" background-opacity=\"100%\"}\n\n## Why WASM? {background-image=\"img/panels.png\" background-opacity=\"20%\"}\n\n- In-browser (and on-system) <span class=\"h\">near-native execution speed</span>\n- Designed with <span class=\"h\">safety</span> in-mind\n  - Flash was a _disaster_ <span class=\"parenthetical\">(It's back now & safe thanks to WASM!)</span>\n  - Java applets UX was _terrible_ <span class=\"parenthetical\">(They're back now, too 😔)</span>\n- <span class=\"hb\">Nobody</span> sane wants to add more Java code to the universe\n- Gives us whole <span class=\"h\">new ways</span> of creating in-browser applications and experiences\n- <span class=\"h\">Universal execution</span> at \"the edge\"\n  \n## {background-image=\"img/panels.png\" background-opacity=\"20%\"}\n\n<iframe seamless width=\"100%\" height=\"100%\" scrolling=\"no\" src=\"webr.html\"></iframe>\n\n## {background-image=\"img/why-r-bubbles.png\" background-opacity=\"100%\"}\n\n## Origin Story {background-image=\"img/bite.webp\" background-opacity=\"50%\"}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n<center>\n![](img/george-c-o.png)\n\nGeorge Stagg\n</center>\n:::\n\n::: {.column width=\"50%\"}\n<center>\n![](img/lionel-c-o.png)\n\nLionel Henry\n</center>\n:::\n\n::::\n\n## Origin Story {background-image=\"img/bite.webp\" background-opacity=\"50%\"}\n\nWaaaay back on Jan 17, 2022…\n\n`https://github.com/r-wasm/webr/`\n\n. . .\n\n`4c8a937881b0bb4a28a992389eba264020c8997c`\n\n```\n\n  webr\n  ├── Dockerfile\n  ├── patches\n  │   └── R-4.1.2\n  │       ├── stage1.patch\n  │       └── stage2.patch\n  └── scripts\n      ├── build_R.sh\n      ├── build_pcre.sh\n      ├── build_xz.sh\n      └── emfc\n\n  4 directories, 7 files\n  \n```\n\n## Origin Story {background-image=\"img/bite.webp\" background-opacity=\"50%\"}\n\nIn theory…\n\n. . .\n\n![](img/111-000.png)\n\n. . .\n\n<center><h1>✅ 💰 ✈️ 🏖️ 🍻</h1></center>\n\n## Origin Story {background-image=\"img/bite.webp\" background-opacity=\"50%\"}\n\nBut you and I use _alot_ of FORTRAN when we use R\n\n- BLAS (1979)\n- LAPACK (1992)\n- Various other subroutines…\n\n. . .\n\n<center><h1>😩 😖 😡</h1></center>\n\n## Now… {background-image=\"img/bite.webp\" background-opacity=\"30%\"}\n\n<img src=\"img/111-002.png\" style=\"max-width:80% !important; max-height:80% !important; margin-left: 10%; margin-top:-1.5%;\"/>\n\n## \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![](img/wgp.jpeg)\n:::\n\n::: {.column width=\"50%\"}\n<h3 style=\"margin-top:50%; text-align:center; height:100%;\">What will/can _you_ do with this power?</h3>\n:::\n\n::::\n\n## Great Power {background-image=\"img/web.jpg\" background-opacity=\"30%\"}\n\nReally straightforward to get setup in HTML:\n\n\n::: {.cell}\n\n```{.javascript .cell-code}\n\n// r.js\n\nimport { WebR } from '@r-wasm/webr'\n\n// `globalThis` is a browser hack to make certain type of\n// javascript objects available everywhere like the old days.\n\n// i.e., this can be accessed everywhere as \"webR\"\n\nglobalThis.webR = new WebR();\nawait globalThis.webR.init();\n\nexport const webR = globalThis.webR;\n \n```\n:::\n\n\n## Great Power {background-image=\"img/web.jpg\" background-opacity=\"30%\"}\n\n\n::: {.cell}\n\n```{.javascript .cell-code}\n\n// main.js\n\nimport './r.js'\n\n// I kinda made a 😊 helper ƒ() to make calling R code from JS super 😌\n// We don't have 🕐 to go into to it today.\n\nconst rDates = await R`\nseq.Date(as.Date(\"2018-01-02\"), as.Date(\"2018-02-28\"), \"1 day\") |> \n  as.character()\n`\n\nconsole.log(rDates)\n \n```\n:::\n\n\n## Great Power {background-image=\"img/web.jpg\" background-opacity=\"30%\"}\n\n\n::: {.cell}\n\n```{.javascript .cell-code}\n\n// js console output\n\n(58) ['2018-01-02', '2018-01-03', '2018-01-04', '2018-01-05', \n  '2018-01-06', '2018-01-07', '2018-01-08', '2018-01-09', '2018-01-10',\n  '2018-01-11', '2018-01-12', '2018-01-13', '2018-01-14', '2018-01-15', \n  '2018-01-16', '2018-01-17', '2018-01-18', '2018-01-19', '2018-01-20'\n  '2018-01-21', '2018-01-22', '2018-01-23', '2018-01-24', '2018-01-25', \n  '2018-01-26', '2018-01-27', '2018-01-28', '2018-01-29', '2018-01-30',\n  '2018-01-31', '2018-02-01', '2018-02-02', '2018-02-03', '2018-02-04',\n  '2018-02-05', '2018-02-06', '2018-02-07', '2018-02-08', '2018-02-09', \n  '2018-02-10', '2018-02-11', '2018-02-12', '2018-02-13', '2018-02-14', \n  '2018-02-15', '2018-02-16', '2018-02-17', '2018-02-18', '2018-02-19', \n  '2018-02-20', '2018-02-21', '2018-02-22', '2018-02-23', '2018-02-24', \n  '2018-02-25', '2018-02-26', '2018-02-27', '2018-02-28']\n   \n```\n:::\n\n\n## Great Power {background-image=\"img/web.jpg\" background-opacity=\"30%\"}\n\nJames Balamuta made it dirt simple to use WebR in Quarto. \n\nThat's how I made the \"session info\" demo, you saw earlier.\n\n````markdown\n---\ntitle: \"Easy WebR In Quarto\"\nformat: html\nengine: knitr\nfilters:\n- webr\n---\n\n```{webr-r}\nsessionInfo()\n```\n\n````\n\n(It has many more features that this.)\n\n## Great Power {background-image=\"img/web.jpg\" background-opacity=\"30%\"}\n\n- There are now ~200 pre-built WebR 📦!!! (up from ~90)\n- [R-Universe](https://r-universe.dev/) ↗️ is revving up to deliver WASM'd 📦\n- All pure base R 📦 are actually available now.\n\n## Web Slinging 101 {background-image=\"img/school.jpg\" background-opacity=\"20%\"}\n\n. . . \n\nI purport that all of you know:\n\n. . .\n\n✅ Markdown <span class=\"parenthetical\">(qmd/rmd/etc.)</span>\n\n. . .\n\n✅ HTML/CSS <span class=\"parenthetical\">(for what Markdown cannot do)</span>\n\n. . . \n\n✅ At least a _little_ JS <span class=\"parenthetical\">(or at least can copypasta a <span style='font-family:monospace; font-size:0.9rem;'>&lt;script&gt;</span> tag snippet)</span>\n\n. . .\n\n## Web Slinging 101 {background-image=\"img/school.jpg\" background-opacity=\"20%\"}\n\n. . .\n\nBut, you now have <span class=\"h\">Great Power</span> at your fingertips!\n\n. . .\n\nAnd, like it or not, the <span class=\"h\">browser</span> is the future of data science.\n\n. . .\n\nAnd, you <span class=\"h\">cannot let this power be co-opted</span> by any entity telling you _\"this is the way…\"_.\n\n. . .\n\nAt _best_, that just <span class=\"h\">constrains you</span>.\n\n## {background-image=\"img/drones.jpg\" background-opacity=\"100%\"}\n\n## Web Slinging 101 {background-image=\"img/school.jpg\" background-opacity=\"20%\"}\n\n- Learn modern HTML / CSS / JS\n  - [Go Make Things](https://gomakethings.com/) ↗️ is a good place to start.\n  - [MDN](https://developer.mozilla.org/en-US/docs/Learn) ↗️ is a great resource.\n  - As is [W3Schools](https://www.w3schools.com/) ↗️.\n- Learn modern _tooling_ for HTML / CSS / JS\n  - [Glitch](https://glitch.com/) ↗️lets you learn 100% online _(I have a WebR starter project on Glitch for you.)_ [ReplIt](https://replit.com/) ↗️. is also 👍🏽.\n- Use VS Code or one of the forks that doesn't spy on you.\n  - [neovim](https://github.com/neovim/neovim) ↗️ is a solid alternative as is [Sublime Text](https://www.sublimetext.com/) ↗️.\n\n## Dive Into The WebR-Verse {background-image=\"img/across.avif\" background-opacity=\"20%\"}\n\n- Hit up [the 🛸 mothership](https://docs.r-wasm.org/webr/latest/) ↗️.\n- Check out [my 🧪🕸️ experiments](https://rud.is/webr-experiments/) ↗️\n- Start in [📜 Quarto](https://github.com/coatless/quarto-webr/) ↗️\n- [👀 Monitor the WebR topic](https://github.com/topics/webr) ↗️\n- Track the [awesome 📋 list](https://github.com/nanxstats/awesome-webr) ↗️\n- Keep an eye on what [R-universe 🌌 is up to](https://github.com/r-universe-org/webr-bundle/tree/master) ↗️\n\n## Dive Into The WebR-Verse {background-image=\"img/across.avif\" background-opacity=\"20%\"}\n\n- See what more established WASM language ports have been up to:\n  - Like what you can do with [Pyodide](https://testdriven.io/blog/build-spa-with-python-part-1/) ↗️\n  - And, [Rust](https://rustwasm.github.io/book/reference/project-templates.html) ↗️\n  - And, [Go](https://wasmbyexample.dev/examples/hello-world/hello-world.go.en-us.html) ↗️\n- And, what amazing things you can do in WASM-ified land that we would have done in R:\n    - Like, [geocomputation/mapping](https://observablehq.com/@kylebarron/prototyping-georust-geoarrow-in-webassembly) ↗️\n    - And, robust [data wrangling](https://observablehq.com/@cmudig/duckdb) ↗️\n\n## Dive Into The WebR-Verse {background-image=\"img/across.avif\" background-opacity=\"20%\"}\n\n- Then remember all the _cool_ things <span class=\"h\">you</span> know how to do <span class=\"h\">in R</span>!\n- And, then consider what kind of <span class=\"h\">lightweight and useful web apps</span> you might be able to bring into the world when you _don't need to worry about a Shiny server being available_.\n- And, then think about all the ways you can <span class=\"h\">teach concepts in R</span> to folks _without needing a_ 💰☁️ _server_.\n  - Like the [School of Data](https://www.theschoolofdata.org/) ↗️.\n- And, what changes when <span class=\"h\">R is available to every modern mobile device</span>.\n  - Perhaps turn [this into an native iOS app vs macOS app](https://github.com/hrbrmstr/macoswasmr) ↗️\n\n## Thank You! {background-image=\"img/you.webp\" background-opacity=\"30%\"}\n\n👉🏼 [Link to this presentation source](https://gitlab.com/hrbrmstr/2023-nyr-webr) ↗️.\n\n📍 Where to find me:\n\n- 🐘 <span style=\"font-family: 'comic code ligatures', monosapce;\">@hrbrmstr@mastodon.social</span>\n- 🦋 <span style=\"font-family: 'comic code ligatures', monosapce;\">@hrbrmstr.dev</span>\n- 🕸️ <span style=\"font-family: 'comic code ligatures', monosapce;\">rud.is/</span>\n- 📰 <span style=\"font-family: 'comic code ligatures', monosapce;\">dailyfinds.hrbrmstr.dev/</span>\n- 🔭 <span style=\"font-family: 'comic code ligatures', monosapce;\">observablehq.com/@hrbrmstr/</span>\n- 📑 <span style=\"font-family: 'comic code ligatures', monosapce;\">git[la|hu]b.com/hrbrmstr/</span>\n",
    "supporting": [
      "2023-nyr-webr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
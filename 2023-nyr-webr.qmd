---
engine: knitr
format:
  revealjs:
    incremental: true
    logo: logo.png
    footer: 2023 New York R Conference • @hrbrmstr (boB Rudis)
    theme: [dark, custom.scss]
---

# Before we begin…

# Into the WebR-Verse {background-image="img/mask.jpg" background-opacity="20%"}

Bringing the power of R to your browser and beyond.

## {background-image="img/hippie.jpeg" background-opacity="25%"}

- Foundations <span class="parenthetical">(i.e., WASM 101)</span>
- Origin Story <span class="parenthetical">(i.e., The challeges of getting R compiled to WASM)</span>
- With Great Power… <span class="parenthetical">(i.e., Just what _can_ you do with WebR)</span>
- Web-Slinging 101 <span class="parenthetical">(i.e., Learning modern web dev skills)</span>
- Dive Into The Spider-Verse <span class="parenthetical">(i.e., Ideas & where you can go to learn more)</span>

## Foundations {background-image="img/panels.png" background-opacity="20%"}

![](img/webassembly.svg)

## WebAssembly (2015) {background-image="img/panels.png" background-opacity="20%"}

Binary instruction format targeting a stack-based virtual machine that runs <span class="h">in-browser</span> or <span class="h">on-system</span>.

. . .

```

  (module
    (memory (export "memory") 1)
    (data (i32.const 0) "Hello, world!")
    (global (export "length") i32 (i32.const 12))
    (global (export "position") i32 (i32.const 0)))  
  
```

. . .

<p class="parenthetical">☝️ is the text representation (WAT)</p>

## WebAssembly {background-image="img/panels.png" background-opacity="20%"}

You don't need to write WAT code to create WASM targets.

- <span class="h">C and C++</span>: Emscripten is an LLVM-to-JavaScript/WebAssembly compiler that is used to compile C and C++ code into WebAssembly
- <span class="h">Rust</span>: Rust also uses LLVM as its compiler backend, enabling it to compile Rust code into WebAssembly
- <span class="h">Go</span> has experimental support for WebAssembly as a compilation target
  
. . . 

↗️ [Lots more do as well.](https://www.fermyon.com/wasm-languages/webassembly-language-support)

## {background-image="img/why.png" background-opacity="100%"}

## Why WASM? {background-image="img/panels.png" background-opacity="20%"}

- In-browser (and on-system) <span class="h">near-native execution speed</span>
- Designed with <span class="h">safety</span> in-mind
  - Flash was a _disaster_ <span class="parenthetical">(It's back now & safe thanks to WASM!)</span>
  - Java applets UX was _terrible_ <span class="parenthetical">(They're back now, too 😔)</span>
- <span class="hb">Nobody</span> sane wants to add more Java code to the universe
- Gives us whole <span class="h">new ways</span> of creating in-browser applications and experiences
- <span class="h">Universal execution</span> at "the edge"
  
## {background-image="img/panels.png" background-opacity="20%"}

<iframe seamless width="100%" height="100%" scrolling="no" src="webr.html"></iframe>

## {background-image="img/why-r-bubbles.png" background-opacity="100%"}

## Origin Story {background-image="img/bite.webp" background-opacity="50%"}

:::: {.columns}

::: {.column width="50%"}
<center>
![](img/george-c-o.png)

George Stagg
</center>
:::

::: {.column width="50%"}
<center>
![](img/lionel-c-o.png)

Lionel Henry
</center>
:::

::::

## Origin Story {background-image="img/bite.webp" background-opacity="50%"}

Waaaay back on Jan 17, 2022…

`https://github.com/r-wasm/webr/`

. . .

`4c8a937881b0bb4a28a992389eba264020c8997c`

```

  webr
  ├── Dockerfile
  ├── patches
  │   └── R-4.1.2
  │       ├── stage1.patch
  │       └── stage2.patch
  └── scripts
      ├── build_R.sh
      ├── build_pcre.sh
      ├── build_xz.sh
      └── emfc

  4 directories, 7 files
  
```

## Origin Story {background-image="img/bite.webp" background-opacity="50%"}

In theory…

. . .

![](img/111-000.png)

. . .

<center>✅ 💰 ✈️ 🏖️ 🍻</center>

## Origin Story {background-image="img/bite.webp" background-opacity="50%"}

But you and I use _alot_ of FORTRAN when we use R

- BLAS (1979)
- LAPACK (1992)
- Various other subroutines…

. . .

<center>😩 😖 😡</center>

## Now… {background-image="img/bite.webp" background-opacity="30%"}

<img src="img/111-002.png" style="max-width:80% !important; max-height:80% !important; margin-left: 10%; margin-top:-1.5%;"/>

## 

:::: {.columns}

::: {.column width="50%"}
![](img/wgp.jpeg)
:::

::: {.column width="50%"}
<h3 style="margin-top:50%; text-align:center; height:100%;">What will/can _you_ do with this power?</h3>
:::

::::

## Great Power {background-image="img/web.jpg" background-opacity="30%"}

Really straightforward to get setup in HTML:

```{javascript, eval=FALSE, echo=TRUE}

// r.js

import { WebR } from '@r-wasm/webr'

// `globalThis` is a browser hack to make certain type of
// javascript objects available everywhere like the old days.

// i.e., this can be accessed everywhere as "webR"

globalThis.webR = new WebR();
await globalThis.webR.init();

export const webR = globalThis.webR;
 
```

## Great Power {background-image="img/web.jpg" background-opacity="30%"}

```{javascript, eval=FALSE, echo=TRUE}

// main.js

import './r.js'

// I kinda made a nice helper function to make calling R code super easy.
// We don't have time to go into to it today.

const rDates = await R`
seq.Date(as.Date("2018-01-02"), as.Date("2018-02-28"), "1 day") |> 
  as.character()
`

console.log(rDates)
 
```

## Great Power {background-image="img/web.jpg" background-opacity="30%"}

```{javascript, eval=FALSE, echo=TRUE}

// js console output

(58) ['2018-01-02', '2018-01-03', '2018-01-04', '2018-01-05', 
  '2018-01-06', '2018-01-07', '2018-01-08', '2018-01-09', '2018-01-10',
  '2018-01-11', '2018-01-12', '2018-01-13', '2018-01-14', '2018-01-15', 
  '2018-01-16', '2018-01-17', '2018-01-18', '2018-01-19', '2018-01-20'
  '2018-01-21', '2018-01-22', '2018-01-23', '2018-01-24', '2018-01-25', 
  '2018-01-26', '2018-01-27', '2018-01-28', '2018-01-29', '2018-01-30',
  '2018-01-31', '2018-02-01', '2018-02-02', '2018-02-03', '2018-02-04',
  '2018-02-05', '2018-02-06', '2018-02-07', '2018-02-08', '2018-02-09', 
  '2018-02-10', '2018-02-11', '2018-02-12', '2018-02-13', '2018-02-14', 
  '2018-02-15', '2018-02-16', '2018-02-17', '2018-02-18', '2018-02-19', 
  '2018-02-20', '2018-02-21', '2018-02-22', '2018-02-23', '2018-02-24', 
  '2018-02-25', '2018-02-26', '2018-02-27', '2018-02-28']
   
```

## Great Power {background-image="img/web.jpg" background-opacity="30%"}

James Balamuta made it dirt simple to use WebR in Quarto. 

That's how I made the "session info" demo, you saw earlier.

````markdown
---
title: "Easy WebR In Quarto"
format: html
engine: knitr
filters:
- webr
---

```{webr-r}
sessionInfo()
```

````

(It has many more features that this.)

## Great Power {background-image="img/web.jpg" background-opacity="30%"}

- There are now ~200 pre-built WebR 📦!!! (up from ~90)
- [R-Universe](https://r-universe.dev/)↗️ is revving up to deliver WASM'd 📦
- All pure base R 📦 are actually available now.

## Web Slinging 101 {background-image="img/school.jpg" background-opacity="20%"}

I purport that all of you know:

. . .

✅ Markdown <span class="parenthetical">(qmd/rmd/etc.)</span>

. . .

✅ HTML/CSS <span class="parenthetical">(for what Markdown cannot do)</span>

. . . 

✅ At least a _little_ JS <span class="parenthetical">(or at least can copypasta a <span style='font-family:monospace; font-size:0.9rem;'>&lt;script&gt;</span> tag snippet)</span>

. . .

## Web Slinging 101 {background-image="img/school.jpg" background-opacity="20%"}

. . .

But, you now have <span class="h">Great Power</span> at your fingertips!

. . .

And, like it or not, the <span class="h">browser</span> is the future of data science.

. . .

And, you <span class="h">cannot let this power be co-opted</span> by any entity telling you _"this is the way…"_.

. . .

At _best_, that just <span class="h">constrains you</span>.

## {background-image="img/drones.jpg" background-opacity="100%"}

## Web Slinging 101 {background-image="img/school.jpg" background-opacity="20%"}

- Learn modern HTML / CSS / JS
  - [Go Make Things](https://gomakethings.com/) ↗️ is a good place to start.
  - [MDN](https://developer.mozilla.org/en-US/docs/Learn) ↗️ is a great resource.
  - As is [W3Schools](https://www.w3schools.com/) ↗️.
- Learn modern _tooling_ for HTML / CSS / JS
  - [Glitch](https://glitch.com/) ↗️lets you learn 100% online _(I have a WebR starter project on Glitch for you.)_ [ReplIt](https://replit.com/) ↗️. is also 👍🏽.
- Use VS Code or one of the forks that doesn't spy on you.
  - [neovim](https://github.com/neovim/neovim) ↗️ is a solid alternative as is [Sublime Text](https://www.sublimetext.com/) ↗️.

## Dive Into The Spider-Verse {background-image="img/across.avif" background-opacity="20%"}

- Hit up [the 🛸 mothership](https://docs.r-wasm.org/webr/latest/) ↗️.
- Check out [my 🧪🕸️ experiments](https://rud.is/webr-experiments/) ↗️
- Start in [📜 Quarto](https://github.com/coatless/quarto-webr/) ↗️
- [👀 Monitor the WebR topic](https://github.com/topics/webr) ↗️
- Track the [awesome 📋 list](https://github.com/nanxstats/awesome-webr) ↗️
- Keep an eye on what [R-universe 🌌 is up to](https://github.com/r-universe-org/webr-bundle/tree/master) ↗️

## Dive Into The Spider-Verse {background-image="img/across.avif" background-opacity="20%"}

- See what more established WASM language ports have been up to:
  - Like what you can do with [Pyodide](https://testdriven.io/blog/build-spa-with-python-part-1/) ↗️
  - And, [Rust](https://rustwasm.github.io/book/reference/project-templates.html) ↗️
  - And, [Go](https://wasmbyexample.dev/examples/hello-world/hello-world.go.en-us.html) ↗️
- And, what amazing things you can do in WASM-ified land that we would have done in R:
    - Like, [geocomputation/mapping](https://observablehq.com/@kylebarron/prototyping-georust-geoarrow-in-webassembly) ↗️
    - And, robust [data wrangling](https://observablehq.com/@cmudig/duckdb) ↗️

## Dive Into The Spider-Verse {background-image="img/across.avif" background-opacity="20%"}

- Then remember all the _cool_ things <span class="h">you</span> know how to do <span class="h">in R</span>!
- And, then consider what kind of <span class="h">lightweight and useful web apps</span> you might be able to bring into the world when you _don't need to worry about a Shiny server being available_.
- And, then think about all the ways you can <span class="h">teach concepts in R</span> to folks _without needing a_ 💰☁️ _server_.
  - Like the [School of Data](https://www.theschoolofdata.org/) ↗️.
- And, what changes when <span class="h">R is available to every modern mobile device</span>.
  - Perhaps turn [this into an native iOS app vs macOS app](https://github.com/hrbrmstr/macoswasmr) ↗️

## Thank You! {background-image="img/you.webp" background-opacity="30%"}

👉🏼 [Link to this presentation source](https://gitlab.com/hrbrmstr/2023-nyr-webr) ↗️.

📍 Where to find me:

- 🐘 <span style="font-family: 'comic code ligatures', monosapce;">@hrbrmstr@mastodon.social</span>
- 🦋 <span style="font-family: 'comic code ligatures', monosapce;">@hrbrmstr.dev</span>
- 🕸️ <span style="font-family: 'comic code ligatures', monosapce;">rud.is/</span>
- 📰 <span style="font-family: 'comic code ligatures', monosapce;">dailyfinds.hrbrmstr.dev/</span>
- 🔭 <span style="font-family: 'comic code ligatures', monosapce;">observable.com/@hrbrmstr/</span>
- 📑 <span style="font-family: 'comic code ligatures', monosapce;">git[la|hu]b.com/hrbrmstr/</span>
